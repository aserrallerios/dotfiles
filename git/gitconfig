[user]
    name = Albert Serrallé Ríos
    email = aserrallerios@gmail.com
[includeIf "gitdir:~/schibsted.github/"]
    path = ~/schibsted.github/.gitconfig
[includeIf "gitdir:~/adevinta.github/"]
    path = ~/adevinta.github/.gitconfig
[credential]
    helper = cache --timeout=600
[color]
    status = always
    interactive = always
    diff = auto
    branch = auto
    ui = true
    excludesfile = ~/.gitignore
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green
[alias]
    # meta
    la = "!git config -l | grep alias | cut -c 7-"

    # add
    a = add                           # add
    au = add -u                       # add only updates
    ai = add --interactive
    chunkyadd = add --patch           # stage commits chunk by chunk

    # assume
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

    #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

    # branch
    b = branch                        # branch (verbose)
    br = branch -v                    # branch
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    # commit
    c = commit -m                     # commit with message
    ca = commit -am                   # commit all with message
    ci = commit                       # commit
    amend = commit --amend            # ammend your last commit
    ammend = commit --amend           # ammend your last commit
    commend = commit --amend --no-edit
    amend-now = !git commit --amend --date=\"$(date -R)\" -C HEAD
    cf = commit --fixup

    # checkout
    co = checkout                     # checkout
    nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

    # cherry-pick
    cp = cherry-pick -x               # grab a change from a branch

    # diff
    d = diff                          # diff unstaged changes
    dc = diff --cached                # diff staged changes
    ds = diff --staged                # diff staged changes
    diffall = diff HEAD
    dlast = diff HEAD^                # diff last committed change
    dsf = "!f() { git diff --color \"$@\" | diff-so-fancy | less --tabs=4 -RFX; }; f"

    # grep
    grep = grep -Ii
    gr = grep -Ii

    # log
    l = log --graph --date=short
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    simple = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
    last = log -10
    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lg = !"git lg1"
    lgt = !"git lg1 --author-date-order"
    lgall = !"git lg1 $(git rev-list -g --all)"
    lt = log --graph --pretty=full
    ll = log --graph --oneline
    ls = log --pretty=format:'%C(yellow)%h %C(green)%ad%C(red)%d %C(reset)%s%C(green) [%cn]' --decorate --date=short
    graph = log --graph --pretty=format':%C(yellow)%h%Cgreen%d%Creset %s %C(white) %an, %ar%Creset'
    standup = log --since '1 day ago' --oneline --author <YOUREMAIL>
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    le = log --oneline --decorate

    # merge
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    # pull
    pl = pull                         # pull
    pr = pull --rebase

    # push
    ps = push                         # push
    please = push --force-with-lease

    # rebase
    rc = rebase --continue            # continue rebase
    rs = rebase --skip                # skip rebase
    ra = rebase --abort               # abort rebase

    # remote
    r = remote -v                     # show remotes (verbose)
    lsrh = ls-remote --heads
    lsrt = ls-remote --tags

    # reset
    unstage = reset HEAD              # remove files from index (tracking)
    uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
    filelog = log -u                  # show changes to a file
    mt = mergetool                    # fire up the merge tool
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

    # stash
    sl = stash list                   # list stashes
    ss = "!sh -c \"git stash save -u $1\" -"
    sa = "!sh -c \"git stash apply 'stash@{$1}'\" -"
    sp = "!sh -c \"git stash pop 'stash@{$1}'\" -"
    sd = "!sh -c \"git stash drop 'stash@{$1}'\" -"

    # status
    s = status -sb
    st = status
    stat = status -s

    # tag
    t = tag -n                        # show tags with <n> lines of each tag message
    lasttag = describe --tags --abbrev=0

    # show
    list = show --name-only
    lines = show --stat

    # svn helpers
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    # submodules
    sbcoup = "!f() { git submodule foreach \"git checkout $1 && git fetch && git pull origin $1 || :\"; }; f"
    sbcors = "!f() { git submodule foreach \"git fetch && git checkout $1 && git reset --hard origin/$1 || :\" ; }; f"
[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
    prompt = false
[mergetool "mvimdiff"]
    cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
    keepbackup=false
[merge]
    summary = true
    verbosity = 1
    tool = mvimdiff
[apply]
    whitespace = nowarn
[branch]
    autosetupmerge = true
[push]
    # 'git push' will push the current branch to its tracking branch
    # the usual default is to push all branches
    default = upstream
[core]
    editor = vim -X
    excludesfile = ~/.gitignore
    autocrlf = false
    preloadindex = true
    pager = less --tabs=4 -RFX
[advice]
    statusHints = true
[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
    algorithm = patience
[rerere]
    # Remember my merges
    # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
    enabled = true
[include]
    path = .gitconfig.user
